<!DOCTYPE html>
<html lang="pl">
<head>
    <title>Poznanie Logiki Biznesowej Aplikacji</title>
    <link rel="stylesheet" href="css/style.css">
</head>
<body>
<a href="../">Powrót</a>
<h1>Poznanie Logiki Biznesowej Aplikacji</h1>
<p>czyli jak działa aplikacja?</p>
<h2>Scope</h2>
<p>
    Scope to zasięg, w jakim badamy daną stronę internetową. Mogą być to wszystkie powiązane domeny lub adresy IP z główną stroną aplikacji,
    jednak o obszerności scope'u decyduje firma zlecająca. Istotnym jest zapoznanie się ze scope'em przed przystąpieniem do testowania,
    bo może okazać się, że zlecający nie uwzględnia w ofercie/umowie danych domen.
</p>
<h2>Rozeznanie</h2>
<p>
    Przed jakimikolwiek testami aplikacji, jeśli mamy możliwość, warto spotkać się z kimś, kto z daną aplikacją miał już sporo do czynienia.
    Kluczem do pełnego poznania działania aplikacji, jest również zapoznanie się z dokumentacją, która zawiera niezbędne informacje dotyczące logiki aplikacji.
</p>
<p>
    Zawsze gdy istnieje możliwość rozwiania jakiejkolwiek wątpliwości dot. aplikacji poprzez np.: porozmawianie z kimś z zespołu
    developerów, warto zapytać - więcej informacji, większa szansa na znalezienie podatności.
</p>
<p>
    W programach Bug Bounty na przykład w serwisie HackerOne, firmy oferujące swój program muszą podać dokładny scope swoich usług. (Zdjęcie poniżej)
</p>
<img src="images/hackerone_scope_example.png">

<%
if (result) {
    if (result.success && result.msg) {
        __append(`
        <script>
            window.addEventListener('DOMContentLoaded', () => {
                let Toast1 = Swal.mixin({
                    toast: true,
                    position: 'top-right',
                    iconColor: 'white',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 5000,
                    timerProgressBar: true
                })
                Toast1.fire({
                    icon: 'success',
                    title: \`${result.msg}\`
                            })
                        })
                        </script>
        `)
    } else if (result.msg) {
        __append(`
        <script>
            window.addEventListener('DOMContentLoaded', () => {
                let Toast1 = Swal.mixin({
                    toast: true,
                    position: 'top-right',
                    iconColor: 'white',
                    customClass: {
                        popup: 'colored-toast'
                    },
                    showConfirmButton: false,
                    timer: 5000,
                    timerProgressBar: true
                })
                Toast1.fire({
                    icon: 'error',
                    title: \`${result.msg}\`
                            })
                        })
                        </script>
        `)
    }
} %>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</body>
</html>